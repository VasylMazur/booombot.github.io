{"version":3,"sources":["logo.svg","components/BeerCard/BeerCard.js","components/BeerList/BeerList.js","mock/Beers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BeerCard","beer","onItemClick","useState","isModalVisible","setIsModalVisible","handleCloseModal","e","target","closest","useEffect","document","addEventListener","removeEventListener","key","uuid","className","onClick","src","photoUrl","alt","name","description","price","BeerList","beers","map","mockBeer","type","MOCK_BEERS","Array","fill","App","beerType","setBeerType","cartItems","setCartItems","fullPrice","setFullPrice","cartStatus","setCartStatatus","activeClassName","to","path","filter","item","exact","cartItem","cartIndex","length","_item","index","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bce80c87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\r\nimport uuid from 'uuid'\r\nimport './BeerCard.css'\r\nexport const BeerCard = ({beer, onItemClick}) => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const handleCloseModal = (e) => {\r\n    if (!e.target.closest('.modal') && isModalVisible) {\r\n      setIsModalVisible(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    document.addEventListener('click', handleCloseModal);\r\n    return () =>{\r\n      document.removeEventListener('click', handleCloseModal);\r\n    }\r\n  })\r\n  return (\r\n    <>\r\n    <div key={uuid()} className=\"card\" onClick={() => setIsModalVisible(true)}>\r\n      <img src={beer.photoUrl} alt=\"beerimg\" className=\"beerimg\"/>\r\n      <p className=\"beer__name\"> {beer.name} </p>\r\n    </div>\r\n    {isModalVisible && (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n\r\n        <div className=\"description\">\r\n        <h2>{beer.name}</h2>\r\n        <p>{beer.description}</p>\r\n        <p>{beer.price}</p>\r\n        </div>\r\n        <div className=\"rightside\">\r\n        <img className=\"desc-img\" src={beer.photoUrl} alt=\"\"></img>\r\n        </div>\r\n        </div>\r\n        <button onClick={() =>{onItemClick(); setIsModalVisible(false)}} className=\"addtocart\">add to cart</button>\r\n\r\n      </div>\r\n    )}\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport { BeerCard } from '../BeerCard/BeerCard';\r\nimport './BeerList.css'\r\n\r\nexport const BeerList = ({beers, onItemClick, ...rest}) => {\r\n  return (\r\n    <section className=\"beerlist\" >\r\n      { beers.map((beer) => <BeerCard beer={beer} onItemClick={onItemClick(beer)}/>)}\r\n    </section>\r\n  );\r\n}","\r\nconst mockUrl = 'https://images.unsplash.com/photo-1504502350688-00f5d59bbdeb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80'\r\n\r\n\r\nconst mockBeer = {\r\n  type: 'pizza',\r\n  price: 12,\r\n  name: 'cutom beer',\r\n  description: 'custom description',\r\n  photoUrl: mockUrl,\r\n}\r\nexport const MOCK_BEERS = Array(100).fill({...mockBeer})\r\n// export const MOCK_BEERS = [{\r\n//   dish: 'pizza',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n\r\n// {\r\n//   dish: 'pizza',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n\r\n// {\r\n//   dish: 'steak',\r\n//   name: 'Beer Abv',\r\n//   photoUrl: mockUrl\r\n// },\r\n// ]","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { BeerList } from './components/BeerList/BeerList';\nimport { MOCK_BEERS } from './mock/Beers';\n\nfunction App() {\n  const [beerType, setBeerType] = useState('all')\n  const [cartItems, setCartItems] = useState([])\n  const [fullPrice, setFullPrice] = useState(0)\n  const [cartStatus, setCartStatatus] = useState('closed')\n  const handleSetCartItems = (item) => () => {\n    setCartStatatus('half-opened')\n    setCartItems([...cartItems, {...item}])\n    setFullPrice(fullPrice + item.price);\n  }\n  return (\n    <Router>\n\n    <div className=\"App\">\n      <h1>DEMO APP</h1>\n      <nav className=\"main-menu\">\n        <NavLink className=\"navlink\" activeClassName=\"navlink--active\" to=\"/drinks\">\n          <h2>Drinks</h2>\n        </NavLink>\n        <NavLink className=\"navlink\" activeClassName=\"navlink--active\" to=\"/food\">\n          <h2>\n            food\n            </h2>\n        </NavLink>\n        <NavLink className=\"navlink\" activeClassName=\"navlink--active\" to=\"/all\">\n          <h2>\n\n          all\n          </h2>\n        </NavLink>\n        <NavLink className=\"navlink\" activeClassName=\"navlink--active\" to=\"/search\">\n          <h2>\n\n          search\n          </h2>\n        </NavLink>\n      </nav>\n      <Switch>\n\n        <Route path='food'>\n          <span>food</span>\n        </Route>\n        <Route path='/drinks'>\n\n      <nav className=\"submenu\">\n        <span className=\"submenu__item\" onClick={() => setBeerType('all')}>\n          All\n        </span>\n        <span className=\"submenu__item\" onClick={() => setBeerType('pizza')}>\n          Pizza\n        </span>\n        <span className=\"submenu__item\" onClick={() => setBeerType('steak')}>\n          Steak\n        </span>\n      </nav>\n      <BeerList beers={MOCK_BEERS.filter(beer => beer.type === beerType || beerType=== 'all')} onItemClick={handleSetCartItems}/>\n        </Route>\n      <Route exact path='/'>\n        <Redirect to=\"drinks\"/>\n      </Route>\n      </Switch>\n    </div>\n    {cartStatus === 'opened' && \n    <div className=\"cart\">\n      <h3 onClick={() => setCartStatatus('closed')}>Shopping cart</h3>\n      {cartItems.map((cartItem, cartIndex) => (<div className=\"cart__item\">\n        <span>{cartItem.name}</span> \n        <div>\n\n        <button onClick={() => setFullPrice(fullPrice - cartItems[cartItems.length - 1].price)} className=\"decrement\">-</button>\n        <span>{cartItems[cartItems.length - 1].price}</span>\n        <button onClick={() => setFullPrice(fullPrice + cartItems[cartItems.length - 1].price)} className=\"increment\">+</button>\n        </div>\n        <button \n          onClick={() => setCartItems(cartItems.filter((_item, index) => index !== cartItems.length - 1 ))} className=\"remove\">remove</button>\n        </div>))}\n        <p>Total price: {fullPrice}</p>\n    </div>\n    }\n    {cartStatus === 'half-opened' && (\n      <div className=\"cart\">\n      <h3 onClick={() => setCartStatatus('opened')}>Shopping cart</h3>\n      <div className=\"cart__item\">\n        <span>{cartItems[cartItems.length - 1].name}</span> \n        <div>\n\n        <button onClick={() => setFullPrice(fullPrice - cartItems[cartItems.length - 1].price)} className=\"decrement\">-</button>\n      <span>{cartItems[cartItems.length - 1].price}</span>\n        <button onClick={() => setFullPrice(fullPrice + cartItems[cartItems.length - 1].price)} className=\"increment\">+</button>\n        </div>\n        <button \n          onClick={() => {setCartItems(cartItems.filter((_item, index) => index !== cartItems.length - 1 )); setCartStatatus('closed')}} className=\"remove\">remove</button>\n        </div>\n        <p>Total price: {fullPrice}</p>\n    </div>\n    )}\n    {cartStatus === 'closed' && (\n      <div className=\"cart\">\n        <h3 onClick={() => setCartStatatus('opened')}>Shopping cart</h3>\n      </div>\n    )}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}